<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python学习基础-标准数据类型]]></title>
    <url>%2F2019%2F04%2F16%2Fpython%2F</url>
    <content type="text"><![CDATA[在Python中，一切皆对象（object）。 Python有自己从属的数据类型,有属性（attribute）和方法（method）/函数（function）。 标准数据类型 类型 type 字符 Number 数字 String 列表 List 字典 Dictionary 元组 Tuble 集合 Set 1.数字类型 类型 type description 整数 integer 例如 1，2，3，4 小数（浮点数） floating point number 例如 1.0，2.0 实数（十进制） decimal 例如 2.3，5.6 序列 sequence 类似于数组或者是列表 操作（加、减、乘、除、乘方、优先级、取余）12345678print(1.5e2) # 1.5*10的2次方print(1+2)print(2-3)print(2*3)print(2*3)print(2/3)print(2**3)print(2*(3-1)) 2.字符串转义字符（escape character）转义字符 “\” 12mystr = "\"shao\"""xianxin"print(mystr) 字符串拼接（concat）可以用”+”,”*”。 12345mystr = "shaoxianxin"print(mystr + " 要好好学习")print(mystr * 3)print("my" in mystr)print("shao" in mystr) 字符串格式化（FromatterString）python字符串格式化有俩种方式：”%”用法，format用法。 “%”用法1、整数的输出%o —— oct 八进制%d —— dec 十进制%x —— hex 十六进制 123456print('%o' % 20)24print('%d' % 20)20print('%x' % 20)14 2、浮点数的输出%f ——保留小数点后面六位有效数字 %.3f，保留3位小数位%e ——保留小数点后面六位有效数字，指数形式输出 %.3e，保留3位小数位，使用科学计数法%g ——在保证六位有效数字的前提下，使用小数方式，否则使用科学计数法 %.3g，保留3位有效数字，使用小数或科学计数法 1234567891011121314print('%f' % 1.11) # 默认保留6位小数1.110000print('%.1f' % 1.11) # 取1位小数1.1print('%e' % 1.11) # 默认6位小数，用科学计数法1.110000e+00print('%.3e' % 1.11) # 取3位小数，用科学计数法1.110e+00print('%g' % 1111.1111) # 默认6位有效数字1111.11print('%.7g' % 1111.1111) # 取7位有效数字1111.111print('%.2g' % 1111.1111) # 取2位有效数字，自动转换为科学计数法1.1e+03 format用法相对基本格式化输出采用‘%’的方法，format()功能更强大，该函数把字符串当成一个模板，通过传入的参数进行格式化，并且使用大括号‘{}’作为特殊字符代替‘%’ 位置匹配（1）不带编号，即“{}” （2）带数字编号，可调换顺序，即“{1}”、“{2}” （3）带关键字，即“{a}”、“{tom}” 12345678910print('&#123;&#125; &#123;&#125;'.format('hello','world')) # 不带字段hello worldprint('&#123;0&#125; &#123;1&#125;'.format('hello','world')) # 带数字编号hello worldprint('&#123;0&#125; &#123;1&#125; &#123;0&#125;'.format('hello','world')) # 打乱顺序hello world helloprint('&#123;1&#125; &#123;1&#125; &#123;0&#125;'.format('hello','world'))world world helloprint('&#123;a&#125; &#123;tom&#125; &#123;a&#125;'.format(tom='hello',a='world')) # 带关键字world hello world 12345678910'&#123;0&#125;, &#123;1&#125;, &#123;2&#125;'.format('a', 'b', 'c')'a, b, c''&#123;&#125;, &#123;&#125;, &#123;&#125;'.format('a', 'b', 'c') # 3.1+版本支持'a, b, c''&#123;2&#125;, &#123;1&#125;, &#123;0&#125;'.format('a', 'b', 'c')'c, b, a''&#123;2&#125;, &#123;1&#125;, &#123;0&#125;'.format(*'abc') # 可打乱顺序'c, b, a''&#123;0&#125;&#123;1&#125;&#123;0&#125;'.format('abra', 'cad') # 可重复'abracadabra' 1234567coord = (3, 5)'X: &#123;0[0]&#125;; Y: &#123;0[1]&#125;'.format(coord)'X: 3; Y: 5'a = &#123;'a': 'test_a', 'b': 'test_b'&#125;'X: &#123;0[a]&#125;; Y: &#123;0[b]&#125;'.format(a)'X: test_a; Y: test_b'通过下标或key匹配参数 1234567# 以前有个人叫王大退，他50岁了name= "王大退"age = 50message = "以前有个人叫"+name+"，他"+str(age)+"岁了"print(message)msg="以前有个人叫&#123;&#125;，他&#123;&#125;岁了"print(msg.format(name , age)) 从用户那获取输入信息 input()12name = input("请输入你的姓名：")print(name+" 你好，欢迎学习python") 3.列表list123456favorite_fruits = ["apple","orange","pear",109,True]# 0 1 2 3 4# -5 -4 -3 -2 -1print(favorite_fruits)print(favorite_fruits[2])print(favorite_fruits[-2]) 索引（index）或者切片（slice）12print(favorite_fruits[1:])print(favorite_fruits[:-3]) 变量替换12favorite_fruits[0] = &quot;grape&quot;print(favorite_fruits) 追加 extend默认是在变量或者数组末尾添加 12345my_numbers = [10,20,1,2,3,4,5]my_fruits = ["apple","orange","pear"]#extend 追加#my_fruits.extend(my_numbers)#print(my_fruits) append 追加单个变量到list结尾12my_fruits.append("grape")print(my_fruits) insert 向list中插入某个元素12my_fruits.insert(0,"grape")print(my_fruits) remove 删除某个元素12my_fruits.remove("apple")print(my_fruits) clear 清空list12my_fruits.clear()print(my_fruits) pop 删除最后一个元素或者某个元素123print(my_fruits)my_fruits.pop(0)print(my_fruits) index 查询list中某个元素的下标123print(my_fruits.index("apple"))print(my_fruits.index("orange"))print(my_fruits.index("pear")) count 查找list某个元素的个数123print(my_fruits.count("apple"))print(my_fruits.count("orange"))print(my_fruits.count("pear")) sort 排序1234my_numbers = [10,20,1,2,3,4,5]my_fruits = ["apple","orange","pear"]print(my_numbers)my_numbers.sort()print(my_numbers) reverse list反转(逆序)1234my_numbers = [10,20,1,2,3,4,5]print(my_numbers)my_numbers.reverse()print(my_numbers) copy 复制1234my_numbers = [10,20,1,2,3,4,5]my_fruits = ["apple","orange","pear"]print(my_numbers)my_fruits1 = my_fruits.copy()print(my_fruits1) 4.元组 tuple一旦被定义，不可以被改变，这与list不同。 12best_company = ("Geogle","Microsoft","IBM","Tencent")print(best_company[0]) 5.函数 function#def 定义函数 #call 调用函数 #关键字 keyword 12345678910#print("hello jack!")def sayHello(name,age):print("hello "+name+"your age:"+str(age))#print("say hi")#sayHello("邵先鑫")best_friends = ["sxx","王二狗","愚公"]ages = [12,13,45]sayHello(best_friends[0],ages[0])sayHello(best_friends[0],ages[1])sayHello(best_friends[0],ages[2])]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2F2019%2F04%2F15%2Ftest%2F</url>
    <content type="text"><![CDATA[的广东人共人和的人医护人员s]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F15%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
